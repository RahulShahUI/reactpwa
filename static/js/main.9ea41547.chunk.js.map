{"version":3,"sources":["reducers/rootReducer.js","reducers/simpleReducer.js","components/counter.jsx","components/counters.jsx","App.js","actions/simpleAction.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","simpleReducer","state","action","type","result","payload","Counter","value","this","props","counter","classes","id","className","getBadgeClasses","formatCount","onClick","onIncrement","onDecrement","onDelete","Component","Counters","counters","handleIncrement","index","indexOf","console","log","setState","handleDecrement","handleDelete","counterId","filter","c","prevProps","prevState","href","style","listStyle","margin","padding","map","key","e","App","simpleAction","event","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ea41547.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport simpleReducer from './simpleReducer';\nexport default combineReducers({\n simpleReducer\n});","export default (state = {}, action) => {\n    switch (action.type) {\n     case 'SIMPLE_ACTION':\n      return {\n       result: action.payload\n      }\n     default:\n      return state\n    }\n   }","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n    formatCount() {\n        const { value } = this.props.counter;\n        return value === 0 ? 'Zero' : value;\n    }\n\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    render() {\n        return (\n            <>\n            <div>\n                <h4>Counter {this.props.counter.id}</h4>\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n                <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\">Increment</button>\n                <button onClick={() => this.props.onDecrement(this.props.counter)} className=\"btn btn-secondary btn-sm mx-2\">Decrement</button>\n                <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm\">Delete</button>\n            </div>\n            </>\n        );\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n    state = { \n        counters: [\n            {id: 1, value: 4},\n            {id: 2, value: 0},\n            {id: 3, value: 0}\n        ],\n     }\n\n     componentDidUpdate(prevProps, prevState) {\n        console.log('prevProps', prevProps);\n        console.log('prevState', prevState);\n     }\n\n     componentWillMount() {\n         \n     }\n\n     handleIncrement = counter => {\n         const counters = [...this.state.counters];\n         const index = counters.indexOf(counter);\n         console.log('index', index);\n         counters[index] = {...counter};\n         counters[index].value++;\n         this.setState({ counters });\n         console.log('in increment');\n    }\n    handleDecrement = counter => {\n        const counters = [...this.state.counters];\n         const index = counters.indexOf(counter);\n         console.log('index', index);\n         counters[index] = {...counter};\n         counters[index].value--;\n         this.setState({ counters });\n        console.log('in decrement');\n    }\n    handleDelete = counterId => {\n        console.log('deleted');\n        const counters = this.state.counters.filter(c => c.id !== counterId);\n        this.setState({ counters })\n    }\n    render() { \n        const listCss = {\n            listStyle: 'none',\n            margin: 0,\n            padding: 10\n        }\n        return ( \n            <div className=\"p-2\">\n                <div>\n                    <a href=\"https://rahulshahui.github.io/pwa/\" className=\"btn btn-primary btn-sm\">Go to PWA</a>\n                    <a href=\"https://rahulshahui.github.io/amp/\" className=\"btn btn-primary btn-sm ml-2\">Go to AMP</a>\n                </div>\n                <ul style={listCss}>\n                    { this.state.counters.map(counter => \n                        <Counter \n                            key={counter.id} \n                            onIncrement={(e)=>this.handleIncrement(e)} \n                            onDecrement={(e)=>this.handleDecrement(e)} \n                            onDelete={()=>this.handleDelete()} counter={counter} \n                        />\n                    ) }\n                </ul>\n            </div> \n        );\n    }\n}\n \nexport default Counters;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// actions\nimport { simpleAction } from './actions/simpleAction';\n\nimport './App.css';\nimport Counters from './components/counters';\n\nconst mapStateToProps = state => ({\n  ...state\n })\n\nconst mapDispatchToProps = dispatch => ({\n  simpleAction: () => dispatch(simpleAction())\n })\n\n \n\n\nclass App extends Component {\n  simpleAction = (event) => {\n    this.props.simpleAction();\n   }\n  render() {\n   return (\n    <div>\n      <Counters/>\n      <button onClick={() => this.simpleAction()}>Test redux action</button>\n    </div>\n   );\n  }\n }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","export const simpleAction = () => dispatch => {\n    dispatch({\n     type: 'SIMPLE_ACTION',\n     payload: 'result_of_simple_action'\n    })\n   }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n<Provider store={configureStore()}>\n  <App />\n </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}